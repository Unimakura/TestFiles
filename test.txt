using UnityEngine;
using System.Collections;
using System.Threading;

public class AudioManager : MonoBehaviour
{
    private AudioSource audioSource;
    private const int BufferSize = 4096;
    private const int SampleRate = 44100;
    
    [SerializeField]
    private AudioLevelDisplay audioLevelDisplay;

    private float currentAudioLevel = 0f;
    private bool isRecorderInitialized = false;
    private bool isRecording = false;
    private Thread audioProcessingThread;
    private volatile bool shouldStopThread = false;

    void Start()
    {
        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.loop = true;
        audioSource.playOnAwake = false;

        StartCoroutine(InitializeAndStartRecording());
    }

    IEnumerator InitializeAndStartRecording()
    {
        Debug.Log("Initializing audio recording...");

        // Request microphone permission
        if (!Permission.HasUserAuthorizedPermission(Permission.Microphone))
        {
            Debug.Log("Requesting microphone permission...");
            Permission.RequestUserPermission(Permission.Microphone);
            yield return new WaitUntil(() => Permission.HasUserAuthorizedPermission(Permission.Microphone));
        }

        Debug.Log("Microphone permission status: " + Permission.HasUserAuthorizedPermission(Permission.Microphone));

        isRecorderInitialized = AudioRecorderInterface.InitializeAudioRecorder();
        if (isRecorderInitialized)
        {
            Debug.Log("Audio recorder initialized successfully");
            AudioRecorderInterface.StartRecording();
            isRecording = true;
            Debug.Log("Started recording");
            CreateAndSetAudioClip();
            StartAudioProcessingThread();
        }
        else
        {
            Debug.LogError("Failed to initialize audio recorder");
        }
    }

    void CreateAndSetAudioClip()
    {
        AudioClip clip = AudioClip.Create("RecordedAudio", BufferSize, 1, SampleRate, true, OnAudioRead);
        audioSource.clip = clip;
        audioSource.Play();
    }

    void StartAudioProcessingThread()
    {
        shouldStopThread = false;
        audioProcessingThread = new Thread(AudioProcessingLoop);
        audioProcessingThread.Start();
    }

    void AudioProcessingLoop()
    {
        while (!shouldStopThread)
        {
            if (isRecorderInitialized && isRecording)
            {
                ProcessAudioData();
            }
            Thread.Sleep(10); // 調整可能な待機時間
        }
    }

    void ProcessAudioData()
    {
        try
        {
            short[] audioBuffer = AudioRecorderInterface.ReadAudioData();
            if (audioBuffer == null)
            {
                Debug.LogWarning("AudioBuffer is null");
                return;
            }

            int samplesRead = audioBuffer.Length;
            Debug.Log($"Samples read: {samplesRead}");

            if (samplesRead > 0)
            {
                // オーディオデータの処理（必要に応じて）
                UpdateAudioLevel(audioBuffer, samplesRead);
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"Exception in ProcessAudioData: {e.Message}\n{e.StackTrace}");
        }
    }

    void UpdateAudioLevel(short[] audioBuffer, int samplesRead)
    {
        float sum = 0f;
        for (int i = 0; i < samplesRead; i++)
        {
            sum += Mathf.Abs(audioBuffer[i] / 32768f);
        }
        currentAudioLevel = sum / samplesRead;
        currentAudioLevel = Mathf.Clamp01(currentAudioLevel * 5f);

        // メインスレッドでUIを更新
        UnityMainThreadDispatcher.Instance().Enqueue(() =>
        {
            if (audioLevelDisplay != null)
            {
                audioLevelDisplay.UpdateAudioLevel(currentAudioLevel);
            }
        });
    }

    void OnAudioRead(float[] data)
    {
        // このメソッドは空のままにし、AudioProcessingLoopでデータを処理します
    }

    void OnDestroy()
    {
        shouldStopThread = true;
        if (audioProcessingThread != null && audioProcessingThread.IsAlive)
        {
            audioProcessingThread.Join(1000); // 最大1秒待機
        }

        if (isRecording)
        {
            AudioRecorderInterface.StopRecording();
            isRecording = false;
        }
        if (isRecorderInitialized)
        {
            AudioRecorderInterface.Release();
            isRecorderInitialized = false;
        }
    }
}
