// AudioManager.cs
using UnityEngine;
using System.Collections;

public class AudioManager : MonoBehaviour
{
    private AudioSource audioSource;
    private short[] audioBuffer;
    private const int BufferSize = 4096;
    
    [SerializeField]
    private AudioLevelDisplay audioLevelDisplay;

    private float currentAudioLevel = 0f;

    void Start()
    {
        audioSource = GetComponent<AudioSource>();
        audioBuffer = new short[BufferSize];

        StartCoroutine(InitializeAndStartRecording());
    }

    IEnumerator InitializeAndStartRecording()
    {
        // Request microphone permission
        if (!Permission.HasUserAuthorizedPermission(Permission.Microphone))
        {
            Permission.RequestUserPermission(Permission.Microphone);
            yield return new WaitUntil(() => Permission.HasUserAuthorizedPermission(Permission.Microphone));
        }

        bool initialized = AudioRecorderInterface.InitializeAudioRecorder();
        if (initialized)
        {
            AudioRecorderInterface.StartRecording();
            StartCoroutine(ProcessAudio());
        }
        else
        {
            Debug.LogError("Failed to initialize audio recorder");
        }
    }

    IEnumerator ProcessAudio()
    {
        while (true)
        {
            int samplesRead = AudioRecorderInterface.ReadAudioData(audioBuffer);
            if (samplesRead > 0)
            {
                // Calculate audio level
                float sum = 0f;
                for (int i = 0; i < samplesRead; i++)
                {
                    sum += Mathf.Abs(audioBuffer[i] / 32768f);
                }
                currentAudioLevel = sum / samplesRead;

                // Update audio level display
                if (audioLevelDisplay != null)
                {
                    audioLevelDisplay.UpdateAudioLevel(currentAudioLevel);
                }

                // Convert short array to float array
                float[] floatBuffer = new float[samplesRead];
                for (int i = 0; i < samplesRead; i++)
                {
                    floatBuffer[i] = audioBuffer[i] / 32768f;
                }

                // Create AudioClip and set data
                AudioClip clip = AudioClip.Create("RecordedAudio", samplesRead, 1, 44100, false);
                clip.SetData(floatBuffer, 0);

                // Play the audio
                audioSource.clip = clip;
                audioSource.Play();
            }
            yield return null;
        }
    }

    void OnDestroy()
    {
        AudioRecorderInterface.StopRecording();
        AudioRecorderInterface.Release();
    }
}

// AudioLevelDisplay.cs
using UnityEngine;
using UnityEngine.UI;

public class AudioLevelDisplay : MonoBehaviour
{
    public Image levelBar;
    public Text levelText;

    public void UpdateAudioLevel(float level)
    {
        // Update UI
        if (levelBar != null)
        {
            levelBar.fillAmount = level;
        }
        
        if (levelText != null)
        {
            levelText.text = $"Audio Level: {level:F2}";
        }
        
        Debug.Log($"Current Audio Level: {level}");
    }
}
