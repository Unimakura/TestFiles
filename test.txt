using UnityEngine;
using System.Collections;

public class AudioManager : MonoBehaviour
{
    private AudioSource audioSource;
    private const int BufferSize = 4096;
    private const int SampleRate = 44100;
    
    [SerializeField]
    private AudioLevelDisplay audioLevelDisplay;

    private float currentAudioLevel = 0f;
    private bool isRecorderInitialized = false;
    private bool isRecording = false;

    void Start()
    {
        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.loop = true;
        audioSource.playOnAwake = false;

        StartCoroutine(InitializeAndStartRecording());
    }

    IEnumerator InitializeAndStartRecording()
    {
        Debug.Log("Initializing audio recording...");

        // Request microphone permission
        if (!Permission.HasUserAuthorizedPermission(Permission.Microphone))
        {
            Debug.Log("Requesting microphone permission...");
            Permission.RequestUserPermission(Permission.Microphone);
            yield return new WaitUntil(() => Permission.HasUserAuthorizedPermission(Permission.Microphone));
        }

        Debug.Log("Microphone permission status: " + Permission.HasUserAuthorizedPermission(Permission.Microphone));

        isRecorderInitialized = AudioRecorderInterface.InitializeAudioRecorder();
        if (isRecorderInitialized)
        {
            Debug.Log("Audio recorder initialized successfully");
            AudioRecorderInterface.StartRecording();
            isRecording = true;
            Debug.Log("Started recording");
            CreateAndSetAudioClip();
        }
        else
        {
            Debug.LogError("Failed to initialize audio recorder");
        }
    }

    void CreateAndSetAudioClip()
    {
        AudioClip clip = AudioClip.Create("RecordedAudio", BufferSize, 1, SampleRate, true, OnAudioRead);
        audioSource.clip = clip;
        audioSource.Play();
    }

    void OnAudioRead(float[] data)
    {
        if (!isRecorderInitialized || !isRecording)
        {
            Debug.LogWarning("Audio recorder is not initialized or not recording");
            return;
        }

        short[] audioBuffer = AudioRecorderInterface.ReadAudioData();
        if (audioBuffer == null)
        {
            Debug.LogError("AudioBuffer is null");
            return;
        }

        int samplesRead = audioBuffer.Length;
        Debug.Log($"Samples read: {samplesRead}");

        if (samplesRead > 0)
        {
            for (int i = 0; i < samplesRead && i < data.Length; i++)
            {
                data[i] = audioBuffer[i] / 32768f;
            }

            // オーディオレベルの計算
            float sum = 0f;
            for (int i = 0; i < samplesRead; i++)
            {
                sum += Mathf.Abs(data[i]);
            }
            currentAudioLevel = sum / samplesRead;
            currentAudioLevel = Mathf.Clamp01(currentAudioLevel * 5f);

            if (audioLevelDisplay != null)
            {
                audioLevelDisplay.UpdateAudioLevel(currentAudioLevel);
            }
        }
        else
        {
            Debug.LogWarning("No audio data read");
        }
    }

    void OnDestroy()
    {
        if (isRecording)
        {
            AudioRecorderInterface.StopRecording();
            isRecording = false;
        }
        if (isRecorderInitialized)
        {
            AudioRecorderInterface.Release();
            isRecorderInitialized = false;
        }
    }
}
