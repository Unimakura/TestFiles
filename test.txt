using UnityEngine;
using System.Collections;
using Unity.RenderStreaming;

public class AudioManager : MonoBehaviour
{
    private AudioSource audioSource;
    private AudioStreamSender audioSender;
    private const int BufferSize = 4096;
    private const int SampleRate = 44100;

    [SerializeField]
    private AudioLevelDisplay audioLevelDisplay;

    private float currentAudioLevel = 0f;

    void Start()
    {
        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.loop = true;
        audioSource.playOnAwake = false;

        audioSender = gameObject.AddComponent<AudioStreamSender>();
        
        // AudioSourceTrack を作成して AudioStreamSender に設定
        var audioSourceTrack = new AudioStreamTrack(audioSource);
        audioSender.Track = audioSourceTrack;

        StartCoroutine(InitializeAndStartRecording());
    }

    IEnumerator InitializeAndStartRecording()
    {
        // マイクの権限リクエスト（既存のコードと同じ）

        bool initialized = AudioRecorderInterface.InitializeAudioRecorder();
        if (initialized)
        {
            Debug.Log("Audio recorder initialized successfully");
            AudioRecorderInterface.StartRecording();
            Debug.Log("Started recording");
            CreateAndSetAudioClip();
            StartCoroutine(ProcessAudio());
        }
        else
        {
            Debug.LogError("Failed to initialize audio recorder");
        }
        yield return null;
    }

    void CreateAndSetAudioClip()
    {
        AudioClip clip = AudioClip.Create("RecordedAudio", BufferSize, 1, SampleRate, true, OnAudioRead);
        audioSource.clip = clip;
        audioSource.Play();
    }

    void OnAudioRead(float[] data)
    {
        short[] audioBuffer = AudioRecorderInterface.ReadAudioData();
        int samplesRead = audioBuffer.Length;

        if (samplesRead > 0)
        {
            for (int i = 0; i < samplesRead && i < data.Length; i++)
            {
                data[i] = audioBuffer[i] / 32768f;
            }

            // オーディオレベルの計算
            float sum = 0f;
            for (int i = 0; i < samplesRead; i++)
            {
                sum += Mathf.Abs(data[i]);
            }
            currentAudioLevel = sum / samplesRead;
            currentAudioLevel = Mathf.Clamp01(currentAudioLevel * 5f);

            if (audioLevelDisplay != null)
            {
                audioLevelDisplay.UpdateAudioLevel(currentAudioLevel);
            }
        }
        else
        {
            Debug.LogWarning("No audio data read");
        }
    }

    IEnumerator ProcessAudio()
    {
        while (true)
        {
            yield return new WaitForSeconds(0.1f); // 適切な間隔で処理を行う
        }
    }

    void OnDestroy()
    {
        AudioRecorderInterface.StopRecording();
        AudioRecorderInterface.Release();
    }
}
