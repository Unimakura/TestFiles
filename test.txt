using UnityEngine;
using System.Collections;

public class AudioManager : MonoBehaviour
{
    private AudioSource audioSource;
    private const int BufferSize = 4096;
    private const int SampleRate = 44100;
    
    [SerializeField]
    private AudioLevelDisplay audioLevelDisplay;

    private float currentAudioLevel = 0f;
    private bool isRecorderInitialized = false;
    private bool isRecording = false;

    void Start()
    {
        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.loop = true;
        audioSource.playOnAwake = false;

        StartCoroutine(InitializeAndStartRecording());
    }

    IEnumerator InitializeAndStartRecording()
    {
        // 既存のコードは変更なし
    }

    void CreateAndSetAudioClip()
    {
        AudioClip clip = AudioClip.Create("RecordedAudio", BufferSize, 1, SampleRate, true, OnAudioRead);
        audioSource.clip = clip;
        audioSource.Play();
    }

    void OnAudioRead(float[] data)
    {
        if (!isRecorderInitialized || !isRecording)
        {
            Debug.LogWarning("Audio recorder is not initialized or not recording");
            return;
        }

        try
        {
            short[] audioBuffer = AudioRecorderInterface.ReadAudioData();
            if (audioBuffer == null)
            {
                Debug.LogError("AudioBuffer is null");
                return;
            }

            int samplesRead = audioBuffer.Length;
            Debug.Log($"Samples read: {samplesRead}");

            if (samplesRead > 0)
            {
                int copyLength = Mathf.Min(samplesRead, data.Length);
                for (int i = 0; i < copyLength; i++)
                {
                    data[i] = audioBuffer[i] / 32768f;
                }

                // オーディオレベルの計算
                float sum = 0f;
                for (int i = 0; i < copyLength; i++)
                {
                    sum += Mathf.Abs(data[i]);
                }
                currentAudioLevel = sum / copyLength;
                currentAudioLevel = Mathf.Clamp01(currentAudioLevel * 5f);

                if (audioLevelDisplay != null)
                {
                    audioLevelDisplay.UpdateAudioLevel(currentAudioLevel);
                }
            }
            else
            {
                Debug.LogWarning("No audio data read");
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"Exception in OnAudioRead: {e.Message}\n{e.StackTrace}");
            RestartRecording();
        }
    }

    void RestartRecording()
    {
        StopRecording();
        StartCoroutine(InitializeAndStartRecording());
    }

    void StopRecording()
    {
        if (isRecording)
        {
            AudioRecorderInterface.StopRecording();
            isRecording = false;
        }
        if (isRecorderInitialized)
        {
            AudioRecorderInterface.Release();
            isRecorderInitialized = false;
        }
    }

    void OnDestroy()
    {
        StopRecording();
    }
}
